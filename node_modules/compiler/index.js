var http = require('http'),
	fs = require('fs'),
	qs = require('querystring'),
	exec = require('child_process').exec,
	path = require('path');


///////////////////////////////////////////////////////////////////////////
// Variables
///////////////////////////////////////////////////////////////////////////

var __PROJECTS_ROOT = undefined;


///////////////////////////////////////////////////////////////////////////
// Functions
///////////////////////////////////////////////////////////////////////////

var compile = function(solution, type, sourcePath, objName, option, callback) {
	if( !__PROJECTS_ROOT ) {
		callback(new Error('NO PROJECTS ROOT'));
		return false;
	}

	// if option is undefined, set ''
	option = option || '';
	// sourcePath = /absolute/users/path/solution/filepath/source
	sourcePath = path.join(__PROJECTS_ROOT, solution, sourcePath);

	var cmpl;
	// type will be c or cpp or java
	// set compiler type, objectName
	switch(type.trim()) {
		case "winc-32":
			cmpl = "i686-w64-mingw32-gcc";
			objName = path.join(__PROJECTS_ROOT, solution, '.bin', objName) + '.exe';
			break;
		case "winc-64":
			cmpl = "x86_64-w64-mingw32-gcc";
			objName = path.join(__PROJECTS_ROOT, solution, '.bin', objName) + '.exe';
			break;
		case "gcc-32":
			cmpl = "gcc -m32";
			objName = path.join(__PROJECTS_ROOT, solution, '.bin', objName) + '.out ';
			break;
		case "gcc-64":
			cmpl = "gcc";
			objName = path.join(__PROJECTS_ROOT, solution, '.bin', objName) + '.out ';
			break;
		case "win_java":
		case "unix_java":
			cmpl = "javac";
			objName = path.join(__PROJECTS_ROOT, solution, '.bin');
			break;
		case "win_c": 
			cmpl = "i686-w64-mingw32-gcc";
			objName = path.join(__PROJECTS_ROOT, solution, '.bin', objName) + '.exe';
			break;
		case "win_cpp":
			cmpl = "i686-w64-mingw32-g++";
			objName = path.join(__PROJECTS_ROOT, solution, '.bin', objName) + '.exe -static-libgcc -static-libstdc++ -Wl,-Bstatic -lstdc++ -lpthread -Wl,-Bdynamic';
			break;
		case "unix_c":
			cmpl = "gcc";
			objName = path.join(__PROJECTS_ROOT, solution, '.bin', objName);
			break;
		case "unix_cpp":
			cmpl = "g++";
			objName = path.join(__PROJECTS_ROOT, solution, '.bin', objName);
			break;
	}

	// command = compiler_type  source_path  output_path  option
	var comm = (cmpl == 'javac') ?
			cmpl + ' ' + sourcePath + ' -d ' + objName + ' ' + option
			: cmpl + ' ' + sourcePath + ' -o ' + objName + ' ' + option;
	// execute command
	exec(comm, function(error, stdout, stderr) {
		if( error || stderr ) {
			stderr = stderr.split(__PROJECTS_ROOT).join('');
			callback(error, stderr);
			return false;
		}

		callback(null, stdout);
	});
}

// set __PROJECTS_ROOT path
var setDir = function(path) {
	__PROJECTS_ROOT = path;

	return this;
}



/////////////////////////////////////////////////////////////////////////////////////////
// setup environment
/////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////
// Exports
///////////////////////////////////////////////////////////////////////////

module.exports = {
	compile: compile,
	setDirectoryRoot: setDir
}
